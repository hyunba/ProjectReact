{"version":3,"sources":["coinTracker/api.ts","coinTracker/atoms.ts","coinTracker/routes/Chart.tsx","coinTracker/routes/Price.tsx","coinTracker/routes/Coin.tsx","coinTracker/routes/Coins.tsx","coinTracker/Router.tsx","theme.ts","coinTracker/App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","a","fetch","response","json","coinId","endDate","Math","floor","Date","now","startDate","isDarkAtom","atom","key","default","Chart","isDark","useRecoilValue","useQuery","fetchCoinHistory","isLoading","data","type","series","name","map","price","close","options","theme","mode","chart","height","width","toolbar","show","background","yaxis","xaxis","axisTicks","labels","categories","time_close","tooltip","y","formatter","value","toFixed","stroke","curve","Container","styled","div","Overview","Value","Text","h3","Price","tickersData","useState","setData","loading","setLoading","useEffect","quotes","USD","Header","header","Title","h1","props","accentColor","Loader","span","OverviewItem","Description","p","Tabs","Tab","isActive","textColor","BackSpace","button","Coin","useParams","state","useLocation","priceMatch","useRouteMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","fetchCoinTickers","tickersLoading","Helmet","rank","symbol","description","total_supply","max_supply","to","path","pathname","CoinsList","ul","li","cardBgColor","Btn","Coins","setAtom","useSetRecoilState","onClick","prev","slice","coin","id","Router","blackTheme","bgColor","lightTheme","GlobalStyle","createGlobalStyle","App","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.fad21bde.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`\r\n\r\n// react query를 사용하기 위해서는 fetcher 함수를 만들어야 한다.\r\n// 이 함수는 json data를 return 해야한다. async 함수로 만든다.\r\nexport async function fetchCoins() {\r\n    const response = await fetch(`${BASE_URL}/coins`); // API의 response를 받기 위해 await 사용\r\n    const json = await response.json();\r\n    \r\n    return json;\r\n\r\n    // 오래된 다른 방법\r\n    // export function fetchCoins() {\r\n    // return fetch(\"https://api.coinpaprika.com/v1/coins\").then((response) =>\r\n    //   response.json()\r\n    //);\r\n    //}\r\n}\r\n\r\nexport async function fetchCoinInfo(coinId:string){\r\n    const response = await fetch(`${BASE_URL}/coins/${coinId}`);\r\n    const json = await response.json();\r\n    \r\n    return json;\r\n}\r\n\r\nexport async function fetchCoinTickers(coinId:string){\r\n    const response = await fetch(`${BASE_URL}/tickers/${coinId}`);\r\n    const json = await response.json();\r\n    \r\n    return json;\r\n}\r\n\r\nexport async function fetchCoinHistory(coinId:string){\r\n    const endDate = Math.floor(Date.now() / 1000); // 2.8 -> 2 처럼 내림처리해준다. 반대로 ceil이 있다. ceil = 올림\r\n    const startDate = endDate - 60* 60 * 24 * 7; // 이 계산식은 일주일 전을 나타냄\r\n    const response = await fetch(`${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`);\r\n    const json = await response.json();\r\n    \r\n    return json;\r\n}","import { atom } from \"recoil\";\r\n\r\nexport const isDarkAtom = atom({\r\n    key: \"isDark\",\r\n    default: false,\r\n});","import { useQuery } from \"react-query\";\r\nimport { fetchCoinHistory } from \"../api\";\r\nimport ApexChart from \"react-apexcharts\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { isDarkAtom } from \"../atoms\";\r\n\r\ninterface graphData {\r\n    time_open: string;\r\n    time_close: string;\r\n    open: number;\r\n    high: number;\r\n    low: number;\r\n    close: number;\r\n    volume: number;\r\n    market_cap: number;\r\n}\r\n\r\ninterface ChartProps {\r\n    coinId: string;\r\n}\r\nfunction Chart({ coinId }: ChartProps) {\r\n    const isDark = useRecoilValue(isDarkAtom);\r\n\r\n    const {isLoading, data} = useQuery<graphData[]>([\"ohlcv\", coinId], () => \r\n        fetchCoinHistory(coinId)\r\n    );\r\n    return <div>{isLoading ? (\"Loading chart...\") : (\r\n    <ApexChart \r\n        type=\"line\" \r\n        series={[\r\n            {\r\n                name: \"Price\",\r\n                data: data?.map(price => price.close),\r\n                // map은 return하는 값으로 array를 만들어준다.\r\n            },\r\n        ]}\r\n        options={{\r\n            theme: {\r\n                mode: isDark ? \"dark\": \"light\",\r\n            },\r\n            chart: {\r\n                height: 300,\r\n                width: 500,\r\n                toolbar: {\r\n                    show: false,\r\n                },\r\n                background: \"transparent\", // 배경색과 동일하게 만듬\r\n            },\r\n            // grid: { // apexchart에 나와있는 그래프 수정.\r\n            //     show: false,\r\n            // },\r\n            yaxis: { // y축 숫자를 안보이게함.\r\n                show: false,\r\n            },\r\n            xaxis: {\r\n                axisTicks:{ show:false },\r\n                labels: { show:false },\r\n                type: \"datetime\",\r\n                categories: data?.map(price => price.time_close),\r\n            },\r\n            tooltip: {\r\n                y: {\r\n                    formatter: (value) => `$ ${value.toFixed((2))}`\r\n                }\r\n            },\r\n            stroke: {\r\n                curve: \"smooth\", // 선 둥글게 하는 부분\r\n                width: 3,\r\n            },\r\n        }}\r\n    />\r\n    )}\r\n    </div>;\r\n}\r\n\r\nexport default Chart;","import { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\ninterface PriceData {\r\n    id: string;\r\n    name: string;\r\n    symbol: string;\r\n    rank: number;\r\n    circulating_supply: number;\r\n    total_supply: number;\r\n    max_supply: number;\r\n    beta_value: number;\r\n    first_data_at: string;\r\n    last_updated: string;\r\n    quotes: {\r\n      USD: {\r\n        ath_date: string;\r\n        ath_price: number;\r\n        market_cap: number;\r\n        market_cap_change_24h: number;\r\n        percent_change_1h: number;\r\n        percent_change_1y: number;\r\n        percent_change_6h: number;\r\n        percent_change_7d: number;\r\n        percent_change_12h: number;\r\n        percent_change_15m: number;\r\n        percent_change_24h: number;\r\n        percent_change_30d: number;\r\n        percent_change_30m: number;\r\n        percent_from_price_ath: number;\r\n        price: number;\r\n        volume_24h: number;\r\n        volume_24h_change_24h: number;\r\n      };\r\n    };\r\n}\r\ninterface PriceProps {\r\n    coinId?: string;\r\n    tickersData?: PriceData;\r\n}\r\n\r\nconst Container = styled.div`\r\n    padding: 0px 20px;\r\n    max-width: 480px;\r\n    margin 0 auto;\r\n`;\r\n\r\nconst Overview = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n`;\r\nconst Value = styled.div`\r\n  width: 50%;\r\n`;\r\nconst Text = styled.h3`\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  text-align: left;\r\n  display: block;\r\n`;\r\n\r\nfunction Price({ coinId, tickersData }: PriceProps){\r\n    const [data, setData] = useState<PriceData>();\r\n    const [loading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        setData(tickersData);\r\n        setLoading(false);\r\n      }, [coinId, tickersData]);\r\n\r\n    return (\r\n        <Container>\r\n            {loading ? (\r\n                \"Loading Price...\"\r\n            ) : (\r\n                <>\r\n                    <Overview>\r\n                        <Value>\r\n                            <Text>\r\n                            Current price:\r\n                            </Text>\r\n                            <Text>\r\n                            $ {data?.quotes.USD.price.toFixed(3)}\r\n                            </Text>\r\n                        </Value>\r\n                    </Overview>\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Price;","import { useQuery } from \"react-query\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { Switch, Route, useLocation, useParams, useRouteMatch } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\r\nimport Chart from \"./Chart\";\r\nimport Price from \"./Price\";\r\n\r\ninterface RouteParams {\r\n    coinId: string;\r\n}\r\n\r\ninterface RouteState {\r\n    name: string;\r\n}\r\n\r\ninterface InfoData {\r\n    id: string;\r\n    name: string;\r\n    symbol: string;\r\n    rank: number;\r\n    is_new: boolean;\r\n    is_active: boolean;\r\n    type: string;\r\n    description: string;\r\n    message: string;\r\n    open_source: boolean;\r\n    started_at: string;\r\n    development_status: string;\r\n    hardware_wallet: boolean;\r\n    proof_type: string;\r\n    org_structure: string;\r\n    hash_algorithm: string;\r\n    first_data_at: string;\r\n    last_data_at: string;\r\n}\r\n\r\ninterface PriceData {\r\n    id: string;\r\n    name: string;\r\n    symbol: string;\r\n    rank: number;\r\n    circulating_supply: number;\r\n    total_supply: number;\r\n    max_supply: number;\r\n    beta_value: number;\r\n    first_data_at: string;\r\n    last_updated: string;\r\n    quotes: {\r\n      USD: {\r\n        ath_date: string;\r\n        ath_price: number;\r\n        market_cap: number;\r\n        market_cap_change_24h: number;\r\n        percent_change_1h: number;\r\n        percent_change_1y: number;\r\n        percent_change_6h: number;\r\n        percent_change_7d: number;\r\n        percent_change_12h: number;\r\n        percent_change_15m: number;\r\n        percent_change_24h: number;\r\n        percent_change_30d: number;\r\n        percent_change_30m: number;\r\n        percent_from_price_ath: number;\r\n        price: number;\r\n        volume_24h: number;\r\n        volume_24h_change_24h: number;\r\n      };\r\n    };\r\n}\r\n\r\nconst Container = styled.div`\r\n    padding: 0px 20px;\r\n    max-width: 480px;\r\n    margin 0 auto;\r\n`;\r\n\r\nconst Header = styled.header`\r\n    height: 10vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center; \r\n`;\r\n\r\nconst Title = styled.h1`\r\n    font-size: 28px;\r\n    color: ${(props) => props.theme.accentColor}\r\n`;\r\n\r\nconst Loader = styled.span`\r\n    text-align: center;\r\n    display: block;\r\n    font-size: 30px;\r\n    padding: 20px;\r\n`;\r\n\r\nconst Overview = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst OverviewItem = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  span:first-child {\r\n    font-size: 10px;\r\n    font-weight: 400;\r\n    text-transform: uppercase;\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\n\r\nconst Description = styled.p`\r\n  margin: 20px 0px;\r\n`;\r\n\r\nconst Tabs = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  margin: 25px 0px;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Tab = styled.span<{ isActive: boolean }>`\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  padding: 7px 0px;\r\n  border-radius: 10px;\r\n  color: ${props => props.isActive ? props.theme.accentColor : props.theme.textColor};\r\n  a {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst BackSpace = styled.button`\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    border-radius: 10px;\r\n    margin: 20px 0px;\r\n    font-size: 13px;\r\n    display: flex;\r\n    text-transform: uppercase;\r\n    color: ${(props) => props.theme.textColor};\r\n`\r\n\r\nfunction Coin() {\r\n    \r\n    const { coinId } = useParams<RouteParams>();\r\n    const { state }= useLocation<RouteState>();\r\n    const priceMatch = useRouteMatch(`/:coinId/price`);\r\n    const chartMatch = useRouteMatch(`/:coinId/chart`);\r\n    const {isLoading: infoLoading, data: infoData} = useQuery<InfoData>([\"info\", coinId], () => fetchCoinInfo(coinId));\r\n    const {isLoading: tickersLoading, data: tickersData} = useQuery<PriceData>([\"tickers\", coinId], () => fetchCoinTickers(coinId));\r\n/*    const [loading, setLoading] = useState(true);\r\n    const [info, setInfo] = useState<InfoData>();\r\n    const [priceInfo, setPriceInfo] = useState<PriceData>();\r\n    //useRouteMatch는 특정한 URL에 있는지의 여부를 알려주는 Hook이다.\r\n    useEffect(() => {\r\n        (async () => { //const json = await response.json() 의 캡슐화 버전\r\n            const infoData = await (\r\n                await fetch(`https://api.coinpaprika.com/v1/coins/${coinId}`)\r\n            ).json();\r\n            const priceData = await (\r\n                await fetch(`https://api.coinpaprika.com/v1/tickers/${coinId}`)\r\n            ).json();\r\n        setInfo(infoData);\r\n        setPriceInfo(priceData);\r\n        setLoading(false);\r\n        })();\r\n    }, [coinId]); */\r\n// useEffect에서 [] 빈값으로 두게되면 한번만 실행하는데 [coinId]를 넣게되면 coinId 값이 변경될때마다 변하게된다.\r\n    const loading = infoLoading || tickersLoading;\r\n// Helmet은 무엇을 render하던 문서의 head로 보내주는 역할을 한다. title을 넣었으니 문서의 head로 보내준다.\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>\r\n                    {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\r\n                </title>\r\n            </Helmet>\r\n            <Header>\r\n                <Title>\r\n                    {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\r\n                </Title>\r\n            </Header>\r\n            {loading ? (\r\n                <Loader>Loading...</Loader>\r\n            ) : (\r\n            <>\r\n            <Overview>\r\n                <OverviewItem>\r\n                    <span>Rank:</span>\r\n                    <span>{infoData?.rank}</span>\r\n                </OverviewItem>\r\n                <OverviewItem>\r\n                    <span>Symbol:</span>\r\n                    <span>${infoData?.symbol}</span>\r\n                </OverviewItem>\r\n                <OverviewItem>\r\n                    <span>Price:</span>\r\n                    <span>{tickersData?.quotes.USD.price.toFixed(2)}</span>\r\n                </OverviewItem>\r\n            </Overview>\r\n            <Description>{infoData?.description}</Description>\r\n            <Overview>\r\n                <OverviewItem>\r\n                    <span>Total Suply:</span>\r\n                    <span>{tickersData?.total_supply}</span>\r\n                </OverviewItem>\r\n                <OverviewItem>\r\n                    <span>Max Supply:</span>\r\n                    <span>{tickersData?.max_supply}</span>\r\n                </OverviewItem>\r\n            </Overview>\r\n            <Tabs>\r\n                <Tab isActive={chartMatch !== null}>\r\n                    <Link to={`/${coinId}/chart`}>Chart Link</Link><br />\r\n                </Tab>\r\n                <Tab isActive={priceMatch !== null}>\r\n                    <Link to={`/${coinId}/price`}>Price Link</Link>\r\n                </Tab>\r\n            </Tabs>\r\n            <Switch>\r\n                <Route path={`/${coinId}/price`}>\r\n                    <Price coinId={coinId} tickersData={tickersData}/>\r\n                </Route>\r\n                <Route path={`/${coinId}/chart`}>                    \r\n                    <Chart coinId = {coinId} />\r\n                </Route>\r\n            </Switch>\r\n            </>\r\n      )}\r\n        <BackSpace>\r\n            <Link to={{pathname:`/`}}>Back</Link>\r\n        </BackSpace>\r\n        </Container>\r\n    );// API에는 state안에 name, 즉 코인들의 이름이 들어있기 때문에 로딩이 빠르다.\r\n      // state에 ?의 의미는 state가 존재하면 name을 가져오고 없을 경우 Loading을 한다는 뜻이다.\r\n}\r\nexport default Coin;","import styled from \"styled-components\";\r\nimport {  Link  } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useQuery } from \"react-query\";\r\nimport { fetchCoins } from \"../api\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { isDarkAtom } from \"../atoms\";\r\n//react qury는 데이터를 파괴하지 않고 캐시에 저장하기 때문에 loading이 안뜨게된다.\r\n\r\nconst Container = styled.div`\r\n    padding: 0px 20px;\r\n    max-width: 480px;\r\n    margin 0 auto;\r\n`;\r\n\r\nconst Header = styled.header`\r\n    height: 10vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center; \r\n`;\r\n\r\nconst CoinsList = styled.ul``;\r\n\r\nconst Coin = styled.li`\r\n    background-color: ${(props) => props.theme.cardBgColor};\r\n    color: ${(props) => props.theme.textColor};\r\n    border-radius: 15px;\r\n    margin-bottom: 10px;\r\n    border: 1px solid white;\r\n    a {\r\n        display: flex;\r\n        padding: 20px;\r\n        transition: color 0.3s ease-in;\r\n        align-items: center;\r\n    }\r\n    &:hover {\r\n        a{\r\n            color: ${(props) => props.theme.accentColor};\r\n        }\r\n    }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    font-size: 48px;\r\n    color: ${(props) => props.theme.accentColor}\r\n`;\r\n\r\nconst Loader = styled.span`\r\n    text-align: center;\r\n    display: block;\r\n    font-size: 30px;\r\n    padding: 20px;\r\n`;\r\n\r\n// const Img = styled.img`\r\n//     width: 25px;\r\n//     height: 25px;\r\n//     margin-right: 10px;\r\n// `;\r\n\r\nconst Btn = styled.button`\r\n    width: 50px;\r\n    height: 50px;\r\n    margin: 10px;\r\n    border-radius: 5px;\r\n    \r\n`;\r\n\r\ninterface CoinInterface {\r\n    id: string,\r\n    name: string,\r\n    symbol: string,\r\n    rank: number,\r\n    is_new: boolean,\r\n    is_active: boolean,\r\n    type: string,\r\n}\r\n\r\nfunction Coins() {\r\n    // useQuery의 hook은 fetchCoins라는 fetcher 함수를 호출하고, fetcher 함수가 loading중이라면 react query는 알려준다.\r\n    // useQuery가 fetcher 함수를 부르고 fetcher 함수가 끝나게되면 react query는 api.ts에 작성한 json을 {data}라는 곳에 들어가게된다.\r\n    // react query를 사용해서 밑에서 작성한 10줄의 코드가 한줄의 코드와 동일한 기능을 하게된다.\r\n    const { isLoading, data } = useQuery<CoinInterface[]>(\"allCoins\", fetchCoins)\r\n\r\n/*    const [coins, setCoins] = useState<CoinInterface[]>([]);\r\n    const [loading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        (async() => {\r\n            const response = await fetch(\"https://api.coinpaprika.com/v1/coins\"); // API의 response를 받기 위해 await 사용\r\n            const json = await response.json();\r\n            setCoins(json.slice(0, 100)); //slice를 사용함으로써 9028개의 코인이 100개 까지만 출력되게한다.\r\n            setLoading(false); // json이 100까지 다 출력하면 false로 Loading을 끝낸다.\r\n        })();// ()(); 이런식으로 작성하면 function이 바로 실행하게된다\r\n    }, []); */\r\n\r\n    //data에 slice를 직접 넣어주어서 100개 까지만 출력하게 해준다.\r\n    //Helmet을 넣어준건 React App 이라는 홈페이지 이름을 바꿔주기 위해 사용\r\n\r\n    const setAtom = useSetRecoilState(isDarkAtom);\r\n    const toggleAtom = () => setAtom((prev) => !prev);\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>\r\n                   coin tracker\r\n                </title>\r\n            </Helmet>\r\n            <Header>\r\n                <Title>Coins</Title>\r\n                <Btn onClick={toggleAtom}>Toggle Mode</Btn>\r\n            </Header>\r\n            {isLoading ? (<Loader>\"Loading...\"</Loader>) : (\r\n            <CoinsList>\r\n                {data?.slice(0, 100).map((coin) => (\r\n                    <Coin key={coin.id}>\r\n                        <Link to={{\r\n                            pathname:`/${coin.id}`,\r\n                            state: { name: coin.name },    \r\n                        }}>\r\n                            {/* <Img src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`} /> */}\r\n                                {coin.name} &rarr;</Link>\r\n                    </Coin>\r\n                ))}\r\n            </CoinsList>\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\nexport default Coins;","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport Coin from \"./routes/Coin\";\r\nimport Coins from \"./routes/Coins\";\r\n\r\n\r\nfunction Router() {\r\n    return <BrowserRouter>\r\n        <Switch>\r\n            <Route path={`/:coinId`}>\r\n                <Coin />\r\n            </Route>\r\n            <Route path={`/`}>\r\n                <Coins />\r\n            </Route>\r\n        </Switch>\r\n    </BrowserRouter>\r\n}\r\nexport default Router;","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const blackTheme: DefaultTheme = {\r\n    bgColor: \"#2c3e50\",\r\n    textColor: \"#ecf0f1\",\r\n    accentColor: \"#9b59b6\",\r\n    cardBgColor: \"transparent\",\r\n};\r\n\r\nexport const lightTheme: DefaultTheme = {\r\n    bgColor: \"#whitesmoke\",\r\n    textColor: \"#black\",\r\n    accentColor: \"#9b59b6\",\r\n    cardBgColor: \"White\",\r\n};\r\n","import { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport Router from \"./Router\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { blackTheme, lightTheme } from \"../theme\";\nimport { useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"./atoms\";\n\nconst GlobalStyle = createGlobalStyle `\n@import url('https://fonts.googleapis.com/css2?family=Varela+Round&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n* {\n  box-sizing: border-box;\n}\nbody{\n  font-family: 'Varela Round', sans-serif;\n  background-color:${props => props.theme.bgColor};\n  color:${props => props.theme.textColor};\n}\n`;\n\nfunction App() {\n  const isDark = useRecoilValue(isDarkAtom); //atoms파일을 useRecoilValue를 사용해서 만들어준다.\n  return (\n    <>\n    <ThemeProvider theme = {isDark ? blackTheme : lightTheme}>\n      <GlobalStyle />\n      <Router />\n      <ReactQueryDevtools initialIsOpen={true} />\n    </ThemeProvider>\n    </>\n  );\n  // Devtools를 사용하게되면 시각적으로 react query에 캐시에 있는 query를 볼 수 있다.\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./coinTracker/App\";\n\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n        <App />\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n// themeProvider는 안에 있는 모든 것이 {theme}으로 접근할 수 있다는 것을 의미\n// react query도 같은 맥락으로 queryClientProvider안에 있는 모든 것은 {queryClient}로 접근한다"],"sourceRoot":""}